import { existsSync, mkdirSync, readFileSync, rmSync, writeFileSync } from 'fs';




const buildFolder = 'build/';

// 清空 build 目录，重新生成
rmSync(buildFolder, { recursive: true, force: true });


mkdirSync(buildFolder);

const htmlFilePath = 'html/index.html';
const articlesJSONFilePath = 'articles.json';
const articles = JSON.parse(readFileSync(articlesJSONFilePath, 'utf8'));
let htmlText = readFileSync(htmlFilePath, 'utf8');

htmlText = htmlText.replace('<div class="articles-box"></div>', () => {

    return `<div class="articles-box">${articles.map(article => `<a class="article" ` +
    (article.url ? `href="${article.url}" ` : '') +
    `data-w="${article.w}" data-h="${article.h}"` +
    (article.t ? `data-t="${article.t}"` : `` ) +
    `style="--color:${article.color};">` +
    `<img src="articles/${article.cover}" alt="${article.title}">` +
        `<div class="content">` +
            `<h2>${article.title}</h2>` +
            `<p>${article.text}</p>` +
        `</div>` +
    `</a>`).join('')}</div>`;
});

const now = new Date();
htmlText = htmlText.replace('<span class="build-info"></span>', () => {
    return `<span class="build-info">Built at ${now.toLocaleString()}</span>`;
});


const copyFileSync = (src, dest) => {
    const content = readFileSync(src);
    writeFileSync(dest, content);
}



// 复制所有封面文件到 build 目录
const articlesFolder = 'articles/';
const buildarticlesFolder = 'build/articles/';
if(!existsSync(buildarticlesFolder)) {
    mkdirSync(buildarticlesFolder);
}

for(const article of articles) {
    copyFileSync(`${articlesFolder}${article.cover}`, `${buildarticlesFolder}${article.cover}`);
}


// copyFileSync('html/main.css', 'build/main.css');





const jsFilePath = 'html/document.js';
const jsBuildFilePath = 'build/document.js';

let jsText = readFileSync(jsFilePath, 'utf8');

jsText = jsText.replace('// build shift', '/*') + `*/\n;bindAll();`;

jsText = `(()=>{${jsText}})();`;
// 使用 uglifyjs 进行压缩
import { minify } from 'uglify-js';
jsText = minify(jsText, {
    warnings: false,
    parse: {},
    compress: {},
    mangle: true, // Note `mangle.properties` is `false` by default.
    output: null,
    toplevel: true,
    nameCache: null,
    ie8: false,
    keep_fnames: false,
    compress: {
        drop_console: true
    }
});

// writeFileSync(jsBuildFilePath, jsText.code, 'utf8');



htmlText = htmlText.replace('<link rel="stylesheet" href="main.css">', '<style>' + readFileSync('html/main.css', 'utf8') + '</style>');
htmlText = htmlText.replace('<script src="document.js"></script>', '<script>' + jsText.code + '</script>');

import { minify as minifyHTML } from 'html-minifier';

htmlText = minifyHTML(htmlText, {
    collapseWhitespace: true,
    removeComments: true,
    minifyCSS: true,
    removeStyleLinkTypeAttributes: true,
    minifyJS: true,
    removeScriptTypeAttributes: true,
    quoteCharacter: "'",
    removeAttributeQuotes: true,
    removeEmptyAttributes: true,
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    removeTagWhitespace: true,
    sortAttributes: true,
    sortClassName: true,
    // useShortDoctype: true,
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: true,
    collapseBooleanAttributes: true,
    collapseWhitespace: true,
    conservativeCollapse: true,
    decodeEntities: true,
    html5: true,
    includeAutoGeneratedTags: false,
    keepClosingSlash: true,
    

});
const htmlBuildFilePath = 'build/index.html';
writeFileSync(htmlBuildFilePath, htmlText, 'utf8');
console.log('Build success!');

