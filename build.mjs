import { existsSync, mkdirSync, readFileSync, readdirSync, writeFileSync } from 'fs';




const buildFolder = 'build/';


if(!existsSync(buildFolder)) {
    mkdirSync(buildFolder);
}


const htmlFilePath = 'html/index.html';
const sponsorsJSONFilePath = 'sponsors.json';
const sponsors = JSON.parse(readFileSync(sponsorsJSONFilePath, 'utf8'));
let htmlText = readFileSync(htmlFilePath, 'utf8');

htmlText = htmlText.replace('<div class="sponsors-box"></div>', () => {

    return `<div class="sponsors-box">${sponsors.map(sponsor => `<a class="sponsor" ` +
    (sponsor.url ? `href="${sponsor.url}" ` : '') +
    `data-w="${sponsor.w}" data-h="${sponsor.h}"` +
    (sponsor.t ? `data-t="${sponsor.t}"` : `` ) +
    `style="background:${sponsor.color};">` +
    `<img src="sponsors/${sponsor.cover}" alt="${sponsor.title}">` +
        `<div class="content">` +
            `<h2>${sponsor.title}</h2>` +
            `<p>${sponsor.text}</p>` +
        `</div>` +
    `</a>`).join('')}</div>`;
});

const now = new Date();
htmlText = htmlText.replace('<span class="build-info"></span>', () => {
    return `<span class="build-info">Built at ${now.toLocaleString()}</span>`;
});


const copyFileSync = (src, dest) => {
    const content = readFileSync(src);
    writeFileSync(dest, content);
}



// 复制 sponsors 目录下所有文件到 build 目录
const sponsorsFolder = 'sponsors/';
const buildSponsorsFolder = 'build/sponsors/';
if(!existsSync(buildSponsorsFolder)) {
    mkdirSync(buildSponsorsFolder);
}

const fileInfos = readdirSync(sponsorsFolder);
for(const fileInfo of fileInfos) {
    copyFileSync(`${sponsorsFolder}${fileInfo}`, `${buildSponsorsFolder}${fileInfo}`);
}


// copyFileSync('html/main.css', 'build/main.css');





const jsFilePath = 'html/document.js';
const jsBuildFilePath = 'build/document.js';

let jsText = readFileSync(jsFilePath, 'utf8');

jsText = jsText.replace('// build shift', '/*') + `*/\nresize();window.addEventListener('resize', debounce(resize,100));`;

jsText = `(()=>{${jsText}})();`;
// 使用 uglifyjs 进行压缩
import { minify } from 'uglify-js';
jsText = minify(jsText, {
    warnings: false,
    parse: {},
    compress: {},
    mangle: true, // Note `mangle.properties` is `false` by default.
    output: null,
    toplevel: true,
    nameCache: null,
    ie8: false,
    keep_fnames: false,
    compress: {
        drop_console: true
    }
});

// writeFileSync(jsBuildFilePath, jsText.code, 'utf8');



htmlText = htmlText.replace('<link rel="stylesheet" href="main.css">', '<style>' + readFileSync('html/main.css', 'utf8') + '</style>');
htmlText = htmlText.replace('<script src="document.js"></script>', '<script>' + jsText.code + '</script>');

import { minify as minifyHTML } from 'html-minifier';

htmlText = minifyHTML(htmlText, {
    collapseWhitespace: true,
    removeComments: true,
    minifyCSS: true,
    removeStyleLinkTypeAttributes: true,
    minifyJS: true,
    removeScriptTypeAttributes: true,
    quoteCharacter: "'",
    removeAttributeQuotes: true,
    removeEmptyAttributes: true,
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    removeTagWhitespace: true,
    sortAttributes: true,
    sortClassName: true,
    // useShortDoctype: true,
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: true,
    collapseBooleanAttributes: true,
    collapseWhitespace: true,
    conservativeCollapse: true,
    decodeEntities: true,
    html5: true,
    includeAutoGeneratedTags: false,
    keepClosingSlash: true,
    

});
const htmlBuildFilePath = 'build/index.html';
writeFileSync(htmlBuildFilePath, htmlText, 'utf8');
console.log('Build success!');

